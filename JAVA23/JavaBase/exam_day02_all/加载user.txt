加载user.txt
1.创建一个实体类User,属性匹配user.txt
	private int id;
	private String name;
	private String password;
	private String email;
	private long phone;

  source->创建set和get方法
2.加载数据,创建POJOContext类
3.需要一个集合,储存加载的User
  Map<Integer,User> users = 
		new HashMap<Integer,User>();
4.编写loadUser方法
	public void loadUser(){
		try {
			//创建流
			BufferedReader in = 
				new BufferedReader(
				 new InputStreamReader(
						new FileInputStream("user.txt") 
						 , "GBK")		
				);
			//创建一个引用,用来指向in所读取的内容
			String str = null;
			while((str = in.readLine()) != null){
				if ("".equals(str)) {//内容为空
					continue;
				}
				if (str.startsWith("#")) {//内容为注释
					continue;
				}
				User user = parseUser(str);
				users.put(user.getId(), user);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private User parseUser(String str) {
		User user = new User();
		String[] arr = str.split(":");
		int id = Integer.parseInt(arr[0]);
		String name = arr[1];
		String password = arr[2];
		long phone = Long.parseLong(arr[3]);
		String email = arr[4];
		user.setId(id);
		user.setEmail(email);
		user.setName(name);
		user.setPassword(password);
		user.setPhone(phone);
		return user;
	}
5.创建空参构造器,调用loadUser
6.创建getUser方法
	public User getUser(int id){
		return users.get(id);
	}
6.service类增加login逻辑
  创建POJOContext pojoContext;并且设置set方法
	public void login(int id,String password){
		User user = pojoContext.getUser(id);
		if (id == 0) {
			loginFrame.setError("用户名类型不正确!");
		}else{
			if (user == null) {
				loginFrame.setError("用户名不存在!");
			}else{
				String pass = user.getPassword();
				if (pass.equals(password)) {
					JOptionPane.
					showMessageDialog(loginFrame, "登陆成功!");
				}else{
					loginFrame.setError("密码错误!");
				}
			}
		}
7.创建主界面类
public MenuFrame() {
		init();
	}
	private void init() {
		setSize(660, 450);
		setTitle("在线考试系统--主界面");
		setLocationRelativeTo(null);
		setDefaultCloseOperation(3);
		add(createPane());
	}
	private Component createPane() {
		JPanel pane = new JPanel(new BorderLayout());
		ImageIcon image = 
			new ImageIcon(getClass().getResource("title.png"));
		JLabel top = new JLabel(image);
		JLabel buttom = 
			new JLabel("版权所有,盗版必究       ",JLabel.RIGHT);
		pane.add(top,BorderLayout.NORTH);
		pane.add(buttom,BorderLayout.SOUTH);
		pane.add(createCenter(),BorderLayout.CENTER);
		return pane;
	}
	JLabel loginInfo;
	private Component createCenter() {
		JPanel pane = new JPanel(new BorderLayout());
		loginInfo = new JLabel("欢迎XXX参加考试",JLabel.CENTER);
		pane.add(loginInfo,BorderLayout.NORTH);
		pane.add(createButtonPane(),BorderLayout.CENTER);
		return pane;
	}
	private Component createButtonPane() {
		JPanel pane = new JPanel(new FlowLayout());
		JButton start = 
			createButton("开始", "exam.png");
		JButton result = 
			createButton("考试成绩", "result.png");
		JButton rule = 
			createButton("考试规则", "message.png");
		JButton exit = 
			createButton("离开", "exit.png");
		pane.add(start);
		pane.add(result);
		pane.add(rule);
		pane.add(exit);
		return pane;
	}
	private JButton createButton(String name,String url){
		JButton button = 
			new JButton(name, 
					new ImageIcon(
							getClass().getResource(url)));
		button.setHorizontalTextPosition(JButton.CENTER);
		button.setVerticalTextPosition(JButton.BOTTOM);
		return button;
		
	}
	public void updateInfo(User user){
		loginInfo.setText("欢迎"+user.getName()+"同学参加考试");
	}

8.创建主程序类,执行程序
	public static void main(String[] args) {
		// 创建组件
		LoginFrame loginFrame = new LoginFrame();
		MenuFrame menuFrame = new MenuFrame();
		Service service = new Service();
		POJOContext pojoContext = new POJOContext();
		
		// 组装组件
		loginFrame.setService(service);
		service.setLoginFrame(loginFrame);
		service.setMenuFrame(menuFrame);
		service.setPojoContext(pojoContext);
		
		
		// 程序开始执行
		service.start();
	}

